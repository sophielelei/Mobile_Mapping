#---------------------------------------
# Create a custom theme
#---------------------------------------
mytheme <- create_theme(
#---------------------------------------
# These are the 'standard color names' in shiny
# I've set them to the default, but you can edit as needed
#---------------------------------------
adminlte_color(
light_blue = "#3c8dbc", # try #434C5E for example
red        = "#dd4b39",
green      = "#00a65a",
aqua       = "#00c0ef",
yellow     = "#f39c12",
blue       = "#001F3F",
navy       = "#001F3F",
teal       = "#39CCCC",
olive      = "#3D9970",
lime       = "#01FF70",
orange     = "#FF851B",
fuchsia    = "#F012BE",
purple     = "#605ca8",
maroon     = "#D81B60",
gray_lte   = "#d2d6de",
),
# You can also set individual colors for any individual thing
adminlte_sidebar(
width = "600px", # Make sure this is 25 more than the width in the UI code
#dark_bg = "#D8DEE9",
#dark_hover_bg = "#81A1C1",
#dark_color = "#2E3440"
),
adminlte_global(
#content_bg = "#FFF",
#box_bg = "#D8DEE9",
#info_box_bg = "#D8DEE9"
)
)
#---------------------------------------
# HIGHLIGHTING GROUPS
#---------------------------------------
highlight_groups <- list(
list(
name = "finance",
color = "#fdf29a",
words = c("pesa", "money", "cash", "credit", "currency", "funds",
"payment", "remittance", "wealth", "income", "savings",
"transaction", "wage gap", "wage", "financial access",
"financial service", "financial inclusion", "banking",
"financial", "economy", "funding")
),
list(
name = "technology",
color = "#d4f9c6",
words = c("mobile", "digitization", "technology", "smartphones", "phone",
"tech", "technologies", "digital", "online", "knowledge networks",
"internet", "ict", "e-commerce", "artificial intelligence",
"platform", "platforms", "social media", "computer", "laptop",
"laptops", "tool", "tools", "network")
),
list(
name = "geography",
color = "#b7e9f6",
words = c("Kenya", "Africa", "East-Africa", "Sub-Saharan Africa",
"sub saharan", "Sub Sahara", "West", "North", "South",
"East", "Global South", "Global North", "Uganda",
"Tanzania", "Rwanda", "Ethiopia", "Nigeria", "Ghana")
),
list(
name = "gender",
color = "#e7d0f5",
words = c("gender", "female", "women", "girl", "female employment",
"women's income", "equality", "feminism", "empowerment",
"equity", "female-led", "women rights", "education",
"gender mainstreaming", "Gen", "Fem", "Gir")
),
list(
name = "entrepreneurship",
color = "#ffd497",
words = c("self-employment", "entrepreneurial", "entrepreneur",
"entrepreneurs", "entrepreneurship", "entrepr", "service",
"start-ups", "startup", "grassroot", "small-scale",
"large-scale", "enterprise", "companies", "compan",
"business", "trade", "work")
),
list(
name = "redflags",
color = "#fbd1d1",
words = c("systematic review", "clinic", "agri", "farmer", "herder",
"pasture", "maternal", "neo", "health")
)
)
#=======================================================================
# DATA PREPROCESSING
#=======================================================================
#-----------------------------------------------------------------------
# Load the data, this will load "data_bib" in the environment.
# you can click on it and take a look
#-----------------------------------------------------------------------
load(Workingfile)
#-----------------------------------------------------------------------
# Sort so screened data is at the bottom
#-----------------------------------------------------------------------
data_bib <- data_bib[with(data_bib, order(Screen2_Assessed)), ]
#-----------------------------------------------------------------------
# Set up the text highlighting
#-----------------------------------------------------------------------
sophiehighlight <- function(text) {
for (group in highlight_groups) {
color <- group$color
words <- group$words
for (word in words) {
pattern <- regex(word, ignore_case = TRUE)
replacement <- function(match) {
paste0('<span style="background-color:', color, '">', match, '</span>')
}
text <- str_replace_all(text, pattern, replacement)
}
}
return(text)
}
#=======================================================================
# GUI - Front-end. Adjust themes above, other than "skin", which ALSO adjusts the themes
# see here - https://rinterface.github.io/shinydashboardPlus/articles/more-skins.html
# and here - https://www.inwt-statistics.com/blog/best-practice-development-of-robust-shiny-dashboards-as-r-packages
# (this is where the one in themes came from)
#=======================================================================
ui = dashboardPage(
skin="blue",
title = "Accordion Test",
freshTheme=mytheme,
header=dashboardHeader(),
sidebar=dashboardSidebar(collapsed=TRUE),
controlbar=dashboardControlbar(width=575,collapsed=FALSE,overlay=FALSE,
hr(),
materialSwitch(
inputId = "Button_discard",
label = "CLICK IF PAPER ISN'T RELEVANT",
value = FALSE,
status = "danger"
),
#--------------------------------------------
# METHODS THREE WAYS OF DOING THIS!
# CHOOSE YOUR FAVOURITE
# AND COMMENT OUT/REMOVE THE REST
#--------------------------------------------
# Methods 1, virtualselectinput
virtualSelectInput(
inputId = "Button_methods",
label = "METHODS:",
choices = list(
"CONCEPTUAL" = c(
"Literature review",
"Framework/Opinion-piece"
),
"QUALITATIVE" = c(
"Interview",
"Survey",
"Focus-groups",
"Economic Research games"
),
"ARCHIVE/TEXT BASED" = c(
"Archival research (newspapers etc)",
"Policy Analysis",
"Content/Thematic Analysis"
),
"STATISTICS" = c(
"Randomised Controlled Trial",
"Other statistical analysis (regression etc)"
),
"MODELLING/GIS" = c(
"Computer simulation/modelling",
"GIS/mapping",
"Big-data analysis (social media)"
) ),
search = TRUE,
multiple = TRUE,
disableOptionGroupCheckbox = TRUE,
width = "100%",
showValueAsTags = TRUE
),
# # Methods 2
# pickerInput(
#    inputId = "Button_methods2",
#    label = "PRIMARY METHODS :",
#    choices = list(
#       "CONCEPTUAL" = c(
#          "Literature review",
#          "Framework/Opinion-piece"
#       ),
#       "QUALITATIVE" = c(
#          "Interview",
#          "Survey",
#          "Focus-groups",
#          "Economic Research games"
#       ),
#       "ARCHIVE/TEXT BASED" = c(
#          "Archival research (newspapers etc)",
#          "Policy Analysis",
#          "Content/Thematic Analysis"
#       ),
#       "STATISTICS" = c(
#          "Randomised Controlled Trial",
#          "Other statistical analysis (regression etc)"
#       ),
#       "MODELLING/GIS" = c(
#          "Computer simulation/modelling",
#          "GIS/mapping",
#          "Big-data analysis (social media)"
#       )
#    ),
#    multiple = TRUE,
#    width = "fit",
#    options = list(multiple-separator = " | ",
#                   actions-box = TRUE,
#                   selected-text-format= "count",
#                   pickerOptions(container = "body"))
# ),
## Methods 3
# multiInput(
#    inputId = "button_methods3",
#    label = "PRIMARY METHODS:",
#    choices = c(
#       "Literature review",
#       "Framework or Opinion-piece",
#       "Interview",
#       "Survey",
#       "Focus-group",
#       "Economic Research games",
#       "Archival (newspapers etc)",
#       "Policy Analysis",
#       "Content/Thematic Analysis",
#       "Randomised Controlled Trial",
#       "Statistics (regression etc)",
#       "Computer simulation/modelling",
#       "Big-data analysis (social media)",
#       "GIS/mapping"),
#    width = "550px"
# ),
#--------------------------------------------
# THEME
#--------------------------------------------
checkboxGroupButtons(
inputId = "Button_Theme",
label = "DFI THEME:",
choices = c("Mobile Money",
"Gender",
"Financial Inclusion",
"Entrepeneurship",
"Technology"),
status = "primary",
individual = TRUE
),
#accordion(
#   id = "accordion_gender",
#   accordionItem(
#      title = "--- Gender -------------------------------------------",
#      collapsed = TRUE,
#      status = "primary",
shinyWidgets::pickerInput(
inputId = "Button_Gender",
label = "GENDER :",
choices = c("Changing power relations between women & men" = 1,
"Structural barriers to financial inclusion" = 2,
"Enabling agency / empowerment" = 3,
"Changing Gender Roles" = 4,
"Access / control over resources" = 5,
"Risk, security, and violence" = 6,
"Gender & Youth" = 7,
"Gender & Elderly" = 8),
multiple = TRUE,
width = "fit",
options = list( `multiple-separator` = " | ",
`actions-box` = TRUE,
`selected-text-format` = "count",
`pickerOptions(container` = "body")
),
#),
#accordionItem(
#   title = "--- Finance -------------------------------------------",
#   status = "warning",
#   collapsed = FALSE,
#   "This is some text!"
shinyWidgets::pickerInput(
inputId = "Button_IncDev",
label = h5("INCLUSIVE. DEVELOPMENT:"),
choices = c("Economic Empowerment",
"Gender Equality & Social Inclusion (GESI)",
"Poverty Reducation",
"Informal Economy",
"Social Norms & Cultural Factors"),
multiple = TRUE,
width = "fit",
options = list( `multiple-separator` = " | ",
`actions-box` = TRUE,
`selected-text-format` = "count",
`pickerOptions(container` = "body")
),
#)
shinyWidgets::pickerInput(
inputId = "Button_MMType",
label = h5("FINANCE/MOBILE-MONEY:"),
choices = list("MPesa" = 1,
"Borrow" = 2,
"Remittance" = 3,
"Credit" = 4,
"Women's Savings Group Use" = 5,
"Transactions"= 6,
"Access to Government Money" = 7,
"Access to NGOs" = 8,
"Platform Visibility (e.g., Influencer)" = 9,
"Access to International Markets" = 10,
"Link to Advertising/Communication" = 11,
"Other [leave a note]" = 12,
"Not Specified" = 13),
multiple = TRUE,
width = "fit",
options = list( `multiple-separator` = " | ",
`actions-box` = TRUE,
`selected-text-format` = "count",
`pickerOptions(container` = "body")
),
#--------------------------------------------------------------------
# Notes
hr(),
fluidRow(textInput(inputId = "notesField", label = "Notes", value = "")),
#--------------------------------------------------------------------
# The next button
hr(),
fluidRow(actionButton("nextButton", "Next", width = "100px",
style="color: #fff; background-color: #4bbf73; border-color: #2e6da4"))
),
# MAIN BODY--------------------------------------------
body=dashboardBody(
includeCSS("www/styles.css"), # Link to style sheet
DT::dataTableOutput("table"),
hr(),
# More info on screening classifications
verbatimTextOutput("moreInfo"),
htmlOutput("count"),
htmlOutput("total")
),
)
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
View(data_bib)
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
View(data_bib)
View(highlight_groups)
#-----------------------------------------------------------------------------------
# Now set up the screen 3 columns
#     screening the social code
#-----------------------------------------------------------------------------------
Workingfile <- "./data/04_Data-ready-2nd-screen/MainScreeningData_Screen1_complete.RData"
load(Workingfile)
bib_all       <- data_bib; rm(data_bib)
#-----------------------------------------------------------------------------------
# FILTER TO THE ROWS YOU WANT
#
# we just wanted the papers where it was the human impacts of flash flood
# If we ticked screen2_social as TRUE then we wanted to keep the paper
#
# FOR YOU. you want screen1_rejectnotentreP to be false (spelt correctly)
data_bib      <- bib_all[which(bib_all$Screen1_RejectNOTEntreP == FALSE),]
#-----------------------------------------------------------------------------------
# set up new columns. One for each thing you want to store.
# these are your output columns for the shiny app
#  keep these three the same
#  If you want a TRUE/FALSE, set to NA.
#  If you want it to store numbers or text,set to "
#-----------------------------------------------------------------------------------
data_bib$Screen2_Assessed <- NA
data_bib$Screen2_Reject   <- NA
data_bib$Screen2_DFI         <- ""
data_bib$Screen2_GAD         <- ""
data_bib$Screen2_IncDev      <- ""
data_bib$Screen2_FinancInc   <- ""
data_bib$Screen2_MMType      <- ""
data_bib$Screen2_TechType    <- ""
data_bib$Screen2_EntrePType  <- ""
data_bib$Screen2_EntrePSec   <- ""
data_bib$Screen2_Methods     <- ""
data_bib$Screen2_Geography   <- ""
data_bib$Screen2_Other       <- ""
#  keep this the same
data_bib$Screen2_Notes      <- ""
#----------------------------
# and save to the data file
#----------------------------
#Workingfile <- "./data/04_Data-ready-2nd-screen/MainScreeningData_Screen1_complete.RData"
save(data_bib, file = "./data/04_Data-ready-2nd-screen/MainScreeningData_Screen2_PreProcessed.RData")
save(data_bib, file = "./data/MainScreeningData_Screen2.rData")
#---------------------------------------------------------------
# OPTIONAL.  You can automatically tag stuff before starting
#---------------------------------------------------------------
# search_risk_assessment <- grep(toupper("risk assessment"), toupper(data_bib$TI))
# data_bib$Screen3_assessment[search_risk_assessment] <- "1"
#
# search_vulnerability <- grep(toupper("vulnerability"), toupper(data_bib$TI))
# data_bib$Screen3_assessment[search_vulnerability] <- "2"
#
# search_risk_perception <- grep(toupper("risk perception"), toupper(data_bib$TI))
# data_bib$Screen3_assessment[search_risk_perception] <- "3"
#
# #----------------------------
# # Geography type search
# search_urban <- grep(toupper("urban"), toupper(data_bib$AB))
# data_bib$Screen3_geo[search_urban] <- "1"
# search_city <- grep(toupper("city"), toupper(data_bib$AB))
# data_bib$Screen3_geo[search_city] <- "1"
# search_rural <- grep(toupper("rural"), toupper(data_bib$AB))
# data_bib$Screen3_geo[search_rural] <- "2"
#
#
# #----------------------------
# # Flood type search
# search_runoff <- grep(toupper("runoff"), toupper(data_bib$AB))
# search_rainfall <- grep(toupper("rainfall"), toupper(data_bib$AB))
# search_dam <- grep(toupper("dam "), toupper(data_bib$AB))
# search_levee <- grep(toupper("levee"), toupper(data_bib$AB))
# search_landslide <- grep(toupper("landslide"), toupper(data_bib$AB))
# search_mudslide <- grep(toupper("mudslide"), toupper(data_bib$AB))
# search_snow <- grep(toupper("snow"), toupper(data_bib$AB))
#
#
# data_bib$Screen3_flood[search_runoff] <- "2"
# data_bib$Screen3_flood[search_rainfall] <- "2"
# data_bib$Screen3_flood[search_dam] <- "3"
# data_bib$Screen3_flood[search_levee] <- "3"
# data_bib$Screen3_flood[search_landslide] <- "5"
# data_bib$Screen3_flood[search_mudslide] <- "5"
# data_bib$Screen3_flood[search_snow] <- "6"
#
#
# save(data_bib, file = "data/screeningSocialData.rData")
######################### Not Used
#----------------------------
# Meta-analysis search
# search_climate <- grep(toupper("climate change"),toupper(data_bib$AB))
# data_bib$Screen3_meta[search_climate] <- "1"
# search_policy <- grep(toupper("policy"),toupper(data_bib$AB))
# data_bib$Screen3_meta[search_policy] <- "4"
#----------------------------
# Impact type search -- THIS NEEDS TO APPEND NOT OVERWRITE
# DOESN"T WORK IN MAIN CODE ANYWAY
# search_impact_fatal <- grep(toupper("death"), toupper(data_bib$AB))
# data_bib$Screen3_impact[search_impact_fatal] <- "1"
# search_impact_comm <- grep(toupper("community"), toupper(data_bib$AB))
# data_bib$Screen3_impact[search_impact_comm] <- "5"
# search_impact_infra <- grep(toupper("infrastructure"), toupper(data_bib$AB))
# data_bib$Screen3_impact[search_impact_infra] <- "6"
######################### SAMPLE
# search_climate <- grep(toupper("climate change"),toupper(data_bib$TI))
# search_vulnerability <- grep(toupper("vulnerability") ,toupper(data_bib$TI))
# data_bib$TEST <- NA
# # This finds the titles with "climate change" OR "vulnerability" then puts "OR" into those rows of the TEST column
# # You are playing with the same output column so it will overwrite.
# data_bib$TEST [unique(c(search_climate,search_vulnerability))] <- "OR"
#
# # This finds the titles with "climate change" AND "vulnerability" then puts "AND" into those rows of the TEST column
# data_bib$TEST [intersect(search_climate,search_vulnerability)]  <- "AND" ### AND
# # But maybe you want both tags in your output file, so this will do both separated by ;
# data_bib$TEST2 <- NA
# # This finds the titles with "climate change" AND "vulnerability" then puts "AND" into those rows of the TEST column
# data_bib$TEST2 [intersect(search_climate,search_vulnerability)]  <- "AND" ### AND
# data_bib$TEST2 [unique(c(search_climate,search_vulnerability))] <-
#   paste(data_bib$TEST2[unique(c(search_climate,search_vulnerability))],"OR",sep=";")
# #print out the results
# data_bib[,c("TI","TEST","TEST2")]
View(data_bib)
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/test.R')
?pickerInput
shinyWidgets::shinyWidgetsGallery()
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
shinyWidgets::shinyWidgetsGallery()
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
shinyWidgets::shinyWidgetsGallery()
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/test.R')
runApp('code/02_Second Screen_Code/test.R')
runApp('code/02_Second Screen_Code/test.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app BACKUP.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app BACKUP.R')
library(shiny); runApp('code/02_Second Screen_Code/2b Second Screen main app BACKUP.R')
library(shiny); runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
library(shiny); runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
library(shiny); runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
file.choose()
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
library(shiny); runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
file.choose()
file.choose()
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
