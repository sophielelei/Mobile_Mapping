# data_bib$Screen3_geo[search_rural] <- "2"
#
#
# #----------------------------
# # Flood type search
# search_runoff <- grep(toupper("runoff"), toupper(data_bib$AB))
# search_rainfall <- grep(toupper("rainfall"), toupper(data_bib$AB))
# search_dam <- grep(toupper("dam "), toupper(data_bib$AB))
# search_levee <- grep(toupper("levee"), toupper(data_bib$AB))
# search_landslide <- grep(toupper("landslide"), toupper(data_bib$AB))
# search_mudslide <- grep(toupper("mudslide"), toupper(data_bib$AB))
# search_snow <- grep(toupper("snow"), toupper(data_bib$AB))
#
#
# data_bib$Screen3_flood[search_runoff] <- "2"
# data_bib$Screen3_flood[search_rainfall] <- "2"
# data_bib$Screen3_flood[search_dam] <- "3"
# data_bib$Screen3_flood[search_levee] <- "3"
# data_bib$Screen3_flood[search_landslide] <- "5"
# data_bib$Screen3_flood[search_mudslide] <- "5"
# data_bib$Screen3_flood[search_snow] <- "6"
#
#
# save(data_bib, file = "data/screeningSocialData.rData")
######################### Not Used
#----------------------------
# Meta-analysis search
# search_climate <- grep(toupper("climate change"),toupper(data_bib$AB))
# data_bib$Screen3_meta[search_climate] <- "1"
# search_policy <- grep(toupper("policy"),toupper(data_bib$AB))
# data_bib$Screen3_meta[search_policy] <- "4"
#----------------------------
# Impact type search -- THIS NEEDS TO APPEND NOT OVERWRITE
# DOESN"T WORK IN MAIN CODE ANYWAY
# search_impact_fatal <- grep(toupper("death"), toupper(data_bib$AB))
# data_bib$Screen3_impact[search_impact_fatal] <- "1"
# search_impact_comm <- grep(toupper("community"), toupper(data_bib$AB))
# data_bib$Screen3_impact[search_impact_comm] <- "5"
# search_impact_infra <- grep(toupper("infrastructure"), toupper(data_bib$AB))
# data_bib$Screen3_impact[search_impact_infra] <- "6"
######################### SAMPLE
# search_climate <- grep(toupper("climate change"),toupper(data_bib$TI))
# search_vulnerability <- grep(toupper("vulnerability") ,toupper(data_bib$TI))
# data_bib$TEST <- NA
# # This finds the titles with "climate change" OR "vulnerability" then puts "OR" into those rows of the TEST column
# # You are playing with the same output column so it will overwrite.
# data_bib$TEST [unique(c(search_climate,search_vulnerability))] <- "OR"
#
# # This finds the titles with "climate change" AND "vulnerability" then puts "AND" into those rows of the TEST column
# data_bib$TEST [intersect(search_climate,search_vulnerability)]  <- "AND" ### AND
# # But maybe you want both tags in your output file, so this will do both separated by ;
# data_bib$TEST2 <- NA
# # This finds the titles with "climate change" AND "vulnerability" then puts "AND" into those rows of the TEST column
# data_bib$TEST2 [intersect(search_climate,search_vulnerability)]  <- "AND" ### AND
# data_bib$TEST2 [unique(c(search_climate,search_vulnerability))] <-
#   paste(data_bib$TEST2[unique(c(search_climate,search_vulnerability))],"OR",sep=";")
# #print out the results
# data_bib[,c("TI","TEST","TEST2")]
load("~/Desktop/mobile_money/M_mapping/data/MainScreeningData_Screen2.rData")
runApp('code/02_Second Screen_Code/2b Second Screen main app.R')
library(shiny)   ;  library(tidyverse)
library(DT)      ;  library(magrittr)
library(stringr) ;  library(shinyWidgets)
library(RISmed)  ;  library(bibliometrix)
library(bib2df)  ;  library(knitr)
library(shinythemes)
library(rmdformats)
# THIS CODE OVERWRITES YOUR INPUT DATA. MAKE A COPY BEFORE YOU START
# (or even better - immedietly after you finish screening)
# Place backup in data/03_backup-screening-data
# title backup file 'XXXX-screeningData-YY'
# XXXX - month and day
# YY - initials
#=======================================================================
# How to run
# Press Ctrl-A to select all, then run.  Shiny should start up
# Click "next" once to precede to screening.
# When you get bored close it down and everything is already saved - then upload to git
# To start again, just select all and run again.
#=======================================================================
rm(list=ls())
# adjust this to the appropriate folder on your system
Workingfile <- "~/Desktop/mobile_money/M_mapping/data/MainScreeningData_Screen2.rData"
load(Workingfile)
#=======================================================================
# Sort so screened data is at the bottom
#=======================================================================
## extra check to make sure screen 1 is complete -
## everything in Screen1_Assessed is either true or false
data_bib <- data_bib[with(data_bib, order(Screen2_Assessed)), ]
## Do we want to change any of the highlighting rules?
#=======================================================================
# Highlighting Rules
#=======================================================================
wordHighlightyellow   <- function(SuspWord,colH = "#fdf29a") {paste0('<span style="background-color:',colH,'">',SuspWord,'</span>')}
wordHighlightgreen    <- function(SuspWord,colH = "#d4f9c6") {paste0('<span style="background-color:',colH,'">',SuspWord,'</span>')}
wordHighlightblue     <- function(SuspWord,colH = "#b7e9f6") {paste0('<span style="background-color:',colH,'">',SuspWord,'</span>')}
wordHighlightred      <- function(SuspWord,colH = "#fbd1d1") {paste0('<span style="background-color:',colH,'">',SuspWord,'</span>')}
wordHighlightpurple   <- function(SuspWord,colH = "#e7d0f5") {paste0('<span style="background-color:',colH,'">',SuspWord,'</span>')}
wordHighlightgrey     <- function(SuspWord,colH = grey(0.9)) {paste0('<span style="background-color:',colH,'">',SuspWord,'</span>')}
wordHighlightorange   <- function(SuspWord,colH = "#ffd497") {paste0('<span style="background-color:',colH,'">',SuspWord,'</span>')}
sophiehighlight <- function(YourData){
#Financial Terms
YourData %<>% str_replace_all(regex("pesa", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("money", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("cash", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("credit", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("currency", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("funds", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("payment", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("remittance", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("wealth", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("income", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("savings", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("transaction", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("wage gap", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("wage", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("financial access", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("financial service", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("financial inclusion", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("banking", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("financial", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("economy", ignore_case = TRUE), wordHighlightyellow)
YourData %<>% str_replace_all(regex("funding", ignore_case = TRUE), wordHighlightyellow)
#Tech
YourData %<>% str_replace_all(regex("mobile", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("digitization", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("technology", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("smartphones", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("phone", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("tech", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("technologies", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("digital", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("online", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("knowledge networks", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("internet", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("Digital", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("ict", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("ICT", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("e-commerce", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("artificial intelligence", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("platform", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("platforms", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("social media", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("computer", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("laptop", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("laptops", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("tool", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("tools", ignore_case = TRUE), wordHighlightgreen)
YourData %<>% str_replace_all(regex("network", ignore_case = TRUE), wordHighlightgreen)
#Geography
YourData %<>% str_replace_all(regex("Kenya", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Africa", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("East-Africa", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Sub-Saharan Africa", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("sub saharan", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Sub Sahara", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("West", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("North", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("South", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("East", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Global South", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Global North", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Uganda", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Tanzania", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Rwanda", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Ethiopia", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Nigeria", ignore_case = TRUE), wordHighlightblue)
YourData %<>% str_replace_all(regex("Ghana", ignore_case = TRUE), wordHighlightblue)
#Gender
YourData %<>% str_replace_all(regex("gender", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("female", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("women", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("girl", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("female employment", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("women's income", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("equality", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("feminism", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("empowerment", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("equity", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("female-led", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("women rights", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("education", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("gender mainstreaming", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("Gen", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("Fem", ignore_case = TRUE), wordHighlightpurple)
YourData %<>% str_replace_all(regex("Gir", ignore_case = TRUE), wordHighlightpurple)
#EnreP
YourData %<>% str_replace_all(regex("self-employment", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("entrepreneurial", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("entrepreneur", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("entrepreneurs", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("entrepreneurship", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("entrepr", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("service", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("start-ups", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("startup", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("grassroot", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("small-scale", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("large-scale", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("enterprise", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("companies", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("compan", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("business", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("trade", ignore_case = TRUE), wordHighlightorange)
YourData %<>% str_replace_all(regex("work", ignore_case = TRUE), wordHighlightorange)
#Red Flags
YourData %<>% str_replace_all(regex("systematic review", ignore_case = TRUE), wordHighlightred)
YourData %<>% str_replace_all(regex("clinic", ignore_case = TRUE), wordHighlightred)
YourData %<>% str_replace_all(regex("agri", ignore_case = TRUE), wordHighlightred)
YourData %<>% str_replace_all(regex("farmer", ignore_case = TRUE), wordHighlightred)
YourData %<>% str_replace_all(regex("herder", ignore_case = TRUE), wordHighlightred)
YourData %<>% str_replace_all(regex("pasture", ignore_case = TRUE), wordHighlightred)
YourData %<>% str_replace_all(regex("maternal", ignore_case = TRUE), wordHighlightred)
YourData %<>% str_replace_all(regex("neo", ignore_case = TRUE), wordHighlightred)
YourData %<>% str_replace_all(regex("health", ignore_case = TRUE), wordHighlightred)
}
#=======================================================================
# GUI function
#=======================================================================
ui <- fluidPage(
tags$head(tags$style(
HTML('
#sidebar {
background-color: #9c8484;
}
#table {
background-color: #f4f3ef;
}
'))),
#--------------------------------------------------------------------
# Feel free to change the theme to serve your preferences, you'll be staring at this for a while
# so might as well make it look good.
#theme = shinytheme("flatly"),
theme = 'bootstrap.css',
#--------------------------------------------------------------------
# This creates a shiny sidebar.  There are other options
sidebarLayout(
sidebarPanel(id = "sidebar",
#--------------------------------------------------------------------
# Not Relevent, we made a mistake
fluidRow(
materialSwitch(inputId="discardButton", label="Not Relevant",value=FALSE,width="100%",status="danger")),
#--------------------------------------------------------------------
# Main Topic
## TO DO - format this better
fluidRow(
checkboxGroupButtons(inputId = "topicGroup",
label = h5("Main Topic"),
choices = c("Mobile Money" = 1,
"Gender" = 2,
"Financial Inclusion" = 3,
"EntreP" = 4,
"Technology" = 5),
checkIcon = list(
yes = tags$i(class = "fa fa-circle",
style = "color: steelblue"),
no = tags$i(class = "fa fa-circle-o",
style = "color: steelblue")),
status = "info",
selected = NULL)),
#--------------------------------------------------------------------
# Paper "Tropes"
fluidRow(
checkboxGroupButtons("tropeGroup",
label = h5("'Tropes' in Abstract"),
choices = list("Gender Imbalance" = 1,
"Development" = 2,
"Mass Communication" = 3,
"International Markets" = 4),
status = "info",
selected = NULL)),
#--------------------------------------------------------------------
# During the flood
fluidRow(
#buzzwords
checkboxGroupInput("buzzGroup",
label = h5("Buzzwords"),
choices = list("Policy" = 1,
"Economic" = 2,
"Climate" = 3,
"Culture" = 4,
"Sustainable Devel" = 5,
"Inclusive Devel"= 6,
"Rural" = 7,
"Urban" = 8,
"Other [leave a note]" = 9),
selected = NULL),
#--------------------------------------------------------------------
# Methods
checkboxGroupInput("methodsGroup",
label = h5("Methods"),
choices = list("Literature Review" = 1,
"Interviews/surveys"= 2,
"Social media or crowd sourcing" = 3,
"Machine learning" = 4,
"Mapping & GIS" = 5,
"Simulations or scenarios" = 6,
"Community guidance & tools" = 7),
selected = NULL)),
#--------------------------------------------------------------------
# Geography
fluidRow(
column(width = 6,
selectInput("geoSelect",
label = h5("Geography"),
choices = list("None" = 0,
"East-Africa" = 1,
"Rest of Africa" = 2,
"Not Africa 'Global South'" = 3),
selected = NULL)),
#--------------------------------------------------------------------
# Tech Type
selectInput("techSelect",
label = h5("Select Tech Type"),
choices = list("Not specified" = 1,
"Digital Platforms" = 2,
"Phone" = 3,
"Computer" = 4),
selected = 1)),
#--------------------------------------------------------------------
# Types of EntreP
fluidRow(
column(width = 6,
selectInput("entrePSelect",
label = h5("Types of EntreP"),
choices = list("Not specified" = 0,
"Ag" = 1,
"Hair" = 2,
"Film/Creative" = 3,
"Ebay Seller" = 4),
selected = NULL)),
#--------------------------------------------------------------------
# Types of Mobile Money (MM)
selectInput("mmSelect",
label = h5("Select Tech of MM"),
choices = list("Not specified" = 1,
"MPessa" = 2,
"Borrow" = 3,
"Remittance" = 4,
"Credit" = 5),
selected = 1)),
#--------------------------------------------------------------------
# Notes
hr(),
fluidRow(textInput(inputId = "notesField", label = "Notes", value = "")),
#--------------------------------------------------------------------
# The next button
hr(),
fluidRow(actionButton("nextButton", "Next", width = "100px",
style="color: #fff; background-color: #4bbf73; border-color: #2e6da4"))
),
#--------------------------------------------------------------------
# Where the main data resides.
# The table itself and whether it has been pre-screened
# Additional information for screening
mainPanel(
DT::dataTableOutput("table"),
hr(),
# More info on screening classifications
verbatimTextOutput("moreInfo"),
htmlOutput("count"),
htmlOutput("total")
),
#--------------------------------------------------------------------
# Where the sidebar sits (left or right).
position="right"
)
)
#=======================================================================
# Server
#=======================================================================
server <-  function(input,output,session){
#--------------------------------------------------------------------
# Create a "reactive value" which allows us to play with the output of a button click
values <- reactiveValues(); values$count <- 0
#--------------------------------------------------------------------
# At the same time on a next click (bloody shiny),
# select the row you care about and highlight it
highlighter <- eventReactive(
# not sure if the problems with the update button have to do with eventReactive, but most of my googling for the error
# lead me to conversations about ignoreNull and
# some of these buttons will update from the database if there is a value there (others will not because i couldnt
# figure out these update buttons)
{input$nextButton}, #ignoreNULL = FALSE, ignoreInit = FALSE,
{
updateMaterialSwitch(session=session, inputId="discardButton",value=FALSE)
updateCheckboxGroupButtons(session=session, inputId="topicGroup", selected = character(0))
updateCheckboxGroupButtons(session=session, inputId="tropeGroup", selected = character(0))
updateCheckboxGroupInput(session=session, inputId="buzzGroup", selected = 0)
updateCheckboxGroupInput(session=session, inputId="methodsGroup", selected = 0)
updateSelectInput(session=session, inputId="geoSelect", selected = as.numeric(data_bib$Screen2_Location)[values$count+1])
updateSelectInput(session=session, inputId="techSelect", selected = as.numeric(data_bib$Screen2_TypesTech)[values$count+1])
updateSelectInput(session=session, inputId="entrePSelect", selected = as.numeric(data_bib$Screen2_TypesEntreP)[values$count+1])
updateSelectInput(session=session, inputId="mmSelect", selected = as.numeric(data_bib$Screen2_TypesMM)[values$count+1])
updateTextInput(session=session, inputId="notesField", value = "")
save(list="data_bib",file=Workingfile)
#-----------------------------------------------------
# If the row number is not at the end, increment up
# THIS IS *REALLY BAD CODING*, ADDED IN BECAUSE IT WANTS TO RECALCULATE THE VALUE.
# if(sum(c(input$discardButton,input$rainButton,input$modelButton, input$socialButton))>0){
if(values$count != nrow(data_bib)){
#-----------------------------------------------------
# move to the next row
values$count <- values$count + 1
#-----------------------------------------------------
# choose that row in the table
YourData <- data_bib[values$count,c("TI","AB")]
YourData2 <- sophiehighlight(YourData)
#-----------------------------------------------------
# Output to data_bib
data_bib$Screen2_Assessed    [values$count-1] <<- TRUE
data_bib$Screen2_Reject      [values$count-1] <<- input$discardButton
if(length(input$topicGroup) <= 0){
data_bib$Screen2_MainTopic     [values$count-1] <<- 0
} else{
data_bib$Screen2_MainTopic     [values$count-1] <<- str_c(input$topicGroup, collapse = '_')
}
if(length(input$tropeGroup) <= 0){
data_bib$Screen2_Tropes     [values$count-1] <<- 0
} else{
data_bib$Screen2_Tropes     [values$count-1] <<- str_c(input$tropeGroup, collapse = '_')
}
if(length(input$buzzGroup) <= 0){
data_bib$Screen2_Buzzwords     [values$count-1] <<- 0
} else{
data_bib$Screen2_Buzzwords     [values$count-1] <<- str_c(input$buzzGroup, collapse = '_')
}
if(length(input$methodsGroup) <= 0){
data_bib$Screen2_Methods     [values$count-1] <<- 0
} else{
data_bib$Screen2_Methods     [values$count-1] <<- str_c(input$methodsGroup, collapse = '_')
}
if(length(input$geoSelect) <= 0){
data_bib$Screen2_Location       [values$count-1] <<- 0
} else {
data_bib$Screen2_Location       [values$count-1] <<- input$geoSelect
}
if(length(input$techSelect) <= 0){t
data_bib$Screen2_TypesTech[values$count-1] <<- 0
} else{
data_bib$Screen2_TypesTech[values$count-1] <<- input$techSelect
}
if(length(input$entrePSelect) <= 0){t
data_bib$Screen2_TypesEntreP[values$count-1] <<- 0
} else{
data_bib$Screen2_TypesEntreP[values$count-1] <<- input$entrePSelect
}
if(length(input$mmSelect) <= 0){t
data_bib$Screen2_TypesMM[values$count-1] <<- 0
} else{
data_bib$Screen2_TypesMM[values$count-1] <<- input$mmSelect
}
data_bib$Screen2_Notes       [values$count-1] <<- input$notesField
return(YourData2)
}
#-----------------------------------------------------
# Or put the final row
else{
YourData <- data_bib[ nrow(data_bib),c("TI","AB")]
YourData2 <- sophiehighlight(YourData)
#-----------------------------------------------------
# Output to data_bib
data_bib$Screen2_Assessed   [nrow(data_bib)] <<- TRUE
data_bib$Screen2_Reject     [nrow(data_bib)] <<- input$discardButton
data_bib$Screen2_MainTopic  [nrow(data_bib)] <<- str_c(input$topicGroup, collapse = '_')
data_bib$Screen2_Tropes     [nrow(data_bib)] <<- input$tropeSelect
data_bib$Screen2_Buzzwords  [nrow(data_bib)] <<- str_c(input$buzzGroup, collapse = '_')
data_bib$Screen2_Methods    [nrow(data_bib)] <<- str_c(input$methodsGroup, collapse = '_')
data_bib$Screen2_Location   [nrow(data_bib)] <<- input$geoSelect
data_bib$Screen2_TypesEntreP[nrow(data_bib)] <<- input$entrePSelect
data_bib$Screen2_TypesTech  [nrow(data_bib)] <<- input$techSelect
data_bib$Screen2_TypesMM    [nrow(data_bib)] <<- input$mmSelect
data_bib$Screen2_Notes      [nrow(data_bib)] <<- input$notesField
return(YourData2)
}
})
#--------------------------------------------------------------------
# Output the table to the GUI
output$table <- DT::renderDataTable({ data <- highlighter()}, escape = FALSE,options = list(dom = 't',bSort=FALSE))
output$covidence <- renderUI({HTML(paste(highlightCovidence(), sep = '<br/>'))})
output$reject <- renderUI({ HTML(paste(highlightExclude(), sep = '<br/>'))})
#--------------------------------------------------------------------
# More info about the screening selections
hr()
output$moreInfo <- renderText({
paste("Assessment Definitions:
Main Topic - select papers main topic(s) can be multiple.
Tropes  - selct (if any) tropes paper is trying to convey (i.e. women can't use tech - gender imbalance)
Buzzwords - select all buzzwords papers has.
",
"Flash Flood Type Definitions:
Not specified - flood type not definied or explicitly stated, unclear
Rainfall - runoff, cloudburst, pluvial, caused by heavy precipitation (no river involved)
Dam/levee breach - anything to do with dams or levees
Speedy river - river height changes rapidly, fast onset riverine flood
Landslide/mudslide - explicitly mentions landslide/mudslide or debris in water
Snowmelt - caused by melting snow
",
"General Planning - select if the paper is not explicitly related to a single event and is about preparing or planning for future events",
"If the paper is about impacts in general, not related to a specific event, make sure 'general' is clicked before selecting the impacts",
"General Science - select if paper is about science-based general planning - ie developing geophysical risk maps",
sep="\n")
})
hr()
output$count <- renderUI({ HTML(paste("You have reviewed", (values$count - 2) ,"papers in this session")) })
output$total <- renderUI({HTML(paste("In total, we have reviewed", (sum(data_bib$Screen3_Assessed_v2, na.rm = TRUE)), "of", (length(data_bib$Screen3_Assessed_v2))))})
}
#=======================================================================
# Run the server
#=======================================================================
shinyApp(ui = ui, server = server)
