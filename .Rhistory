"pasture", "maternal", "neo", "health")
)
)
#=======================================================================
# DATA PREPROCESSING
#=======================================================================
#-----------------------------------------------------------------------
# Load the data, this will load "data_bib" in the environment.
# you can click on it and take a look
#-----------------------------------------------------------------------
load(Workingfile)
#-----------------------------------------------------------------------
# Sort so screened data is at the bottom
#-----------------------------------------------------------------------
data_bib <- data_bib[with(data_bib, order(Screen2_Assessed)), ]
#-----------------------------------------------------------------------
# Set up the text highlighting
#-----------------------------------------------------------------------
sophiehighlight <- function(text) {
for (group in highlight_groups) {
color <- group$color
words <- group$words
for (word in words) {
pattern <- regex(word, ignore_case = TRUE)
replacement <- function(match) {
paste0('<span style="background-color:', color, '">', match, '</span>')
}
text <- str_replace_all(text, pattern, replacement)
}
}
return(text)
}
#=======================================================================
# GUI - Front-end. Adjust themes above, other than "skin", which ALSO adjusts the themes
# see here - https://rinterface.github.io/shinydashboardPlus/articles/more-skins.html
# and here - https://www.inwt-statistics.com/blog/best-practice-development-of-robust-shiny-dashboards-as-r-packages
# (this is where the one in themes came from)
#=======================================================================
ui = dashboardPage(
skin="blue",
title = "Accordion Test",
freshTheme=mytheme,
header=dashboardHeader(),
sidebar=dashboardSidebar(collapsed=TRUE),
controlbar=dashboardControlbar(width=575,collapsed=FALSE,overlay=FALSE,
hr(),
materialSwitch(
inputId = "Button_discard",
label = "CLICK IF PAPER ISN'T RELEVANT",
value = FALSE,
status = "danger"
),
#--------------------------------------------
# METHODS THREE WAYS OF DOING THIS!
# CHOOSE YOUR FAVOURITE
# AND COMMENT OUT/REMOVE THE REST
#--------------------------------------------
# Methods 1, virtualselectinput
virtualSelectInput(
inputId = "Button_methods",
label = "METHODS:",
choices = list(
"CONCEPTUAL" = c(
"Literature review",
"Framework/Opinion-piece"
),
"QUALITATIVE" = c(
"Interview",
"Survey",
"Focus-groups",
"Economic Research games"
),
"ARCHIVE/TEXT BASED" = c(
"Archival research (newspapers etc)",
"Policy Analysis",
"Content/Thematic Analysis"
),
"STATISTICS" = c(
"Randomised Controlled Trial",
"Other statistical analysis (regression etc)"
),
"MODELLING/GIS" = c(
"Computer simulation/modelling",
"GIS/mapping",
"Big-data analysis (social media)"
) ),
search = TRUE,
multiple = TRUE,
disableOptionGroupCheckbox = TRUE,
width = "100%",
showValueAsTags = TRUE
),
# # Methods 2
# pickerInput(
#    inputId = "Button_methods2",
#    label = "PRIMARY METHODS :",
#    choices = list(
#       "CONCEPTUAL" = c(
#          "Literature review",
#          "Framework/Opinion-piece"
#       ),
#       "QUALITATIVE" = c(
#          "Interview",
#          "Survey",
#          "Focus-groups",
#          "Economic Research games"
#       ),
#       "ARCHIVE/TEXT BASED" = c(
#          "Archival research (newspapers etc)",
#          "Policy Analysis",
#          "Content/Thematic Analysis"
#       ),
#       "STATISTICS" = c(
#          "Randomised Controlled Trial",
#          "Other statistical analysis (regression etc)"
#       ),
#       "MODELLING/GIS" = c(
#          "Computer simulation/modelling",
#          "GIS/mapping",
#          "Big-data analysis (social media)"
#       )
#    ),
#    multiple = TRUE,
#    width = "fit",
#    options = list(multiple-separator = " | ",
#                   actions-box = TRUE,
#                   selected-text-format= "count",
#                   pickerOptions(container = "body"))
# ),
## Methods 3
# multiInput(
#    inputId = "button_methods3",
#    label = "PRIMARY METHODS:",
#    choices = c(
#       "Literature review",
#       "Framework or Opinion-piece",
#       "Interview",
#       "Survey",
#       "Focus-group",
#       "Economic Research games",
#       "Archival (newspapers etc)",
#       "Policy Analysis",
#       "Content/Thematic Analysis",
#       "Randomised Controlled Trial",
#       "Statistics (regression etc)",
#       "Computer simulation/modelling",
#       "Big-data analysis (social media)",
#       "GIS/mapping"),
#    width = "550px"
# ),
#--------------------------------------------
# THEME
#--------------------------------------------
checkboxGroupButtons(
inputId = "Button_Theme",
label = "DFI THEME:",
choices = c("Mobile Money",
"Gender",
"Financial Inclusion",
"Entrepeneurship",
"Technology"),
status = "primary",
individual = TRUE
),
#accordion(
#   id = "accordion_gender",
#   accordionItem(
#      title = "--- Gender -------------------------------------------",
#      collapsed = TRUE,
#      status = "primary",
shinyWidgets::pickerInput(
inputId = "Button_Gender",
label = "GENDER :",
choices = c("Changing power relations between women & men" = 1,
"Structural barriers to financial inclusion" = 2,
"Enabling agency / empowerment" = 3,
"Changing Gender Roles" = 4,
"Access / control over resources" = 5,
"Risk, security, and violence" = 6,
"Gender & Youth" = 7,
"Gender & Elderly" = 8),
multiple = TRUE,
width = "fit",
options = list( `multiple-separator` = " | ",
`actions-box` = TRUE,
`selected-text-format` = "count",
`pickerOptions(container` = "body")
),
#),
#accordionItem(
#   title = "--- Finance -------------------------------------------",
#   status = "warning",
#   collapsed = FALSE,
#   "This is some text!"
shinyWidgets::pickerInput(
inputId = "Button_IncDev",
label = h5("INCLUSIVE. DEVELOPMENT:"),
choices = c("Economic Empowerment",
"Gender Equality & Social Inclusion (GESI)",
"Poverty Reducation",
"Informal Economy",
"Social Norms & Cultural Factors"),
multiple = TRUE,
width = "fit",
options = list( `multiple-separator` = " | ",
`actions-box` = TRUE,
`selected-text-format` = "count",
`pickerOptions(container` = "body")
),
#)
shinyWidgets::pickerInput(
inputId = "Button_MMType",
label = h5("FINANCE/MOBILE-MONEY:"),
choices = list("MPesa" = 1,
"Borrow" = 2,
"Remittance" = 3,
"Credit" = 4,
"Women's Savings Group Use" = 5,
"Transactions"= 6,
"Access to Government Money" = 7,
"Access to NGOs" = 8,
"Platform Visibility (e.g., Influencer)" = 9,
"Access to International Markets" = 10,
"Link to Advertising/Communication" = 11,
"Other [leave a note]" = 12,
"Not Specified" = 13),
multiple = TRUE,
width = "fit",
options = list( `multiple-separator` = " | ",
`actions-box` = TRUE,
`selected-text-format` = "count",
`pickerOptions(container` = "body")
),
#--------------------------------------------------------------------
# Notes
hr(),
fluidRow(textInput(inputId = "notesField", label = "Notes", value = "")),
#--------------------------------------------------------------------
# The next button
hr(),
fluidRow(actionButton("nextButton", "Next", width = "100px",
style="color: #fff; background-color: #4bbf73; border-color: #2e6da4"))
),
# MAIN BODY--------------------------------------------
body=dashboardBody(
includeCSS("www/styles.css"), # Link to style sheet
DT::dataTableOutput("table"),
hr(),
# More info on screening classifications
verbatimTextOutput("moreInfo"),
htmlOutput("count"),
htmlOutput("total")
),
)
#=======================================================================
# Server
#=======================================================================
server <-  function(input,output,session){
#--------------------------------------------------------------------
# Create a "reactive value" which allows us to play with the output of a button click
values <- reactiveValues(); values$count <- 0
#--------------------------------------------------------------------
# At the same time on a next click (bloody shiny),
# select the row you care about and highlight it
highlighter <- eventReactive(
# not sure if the problems with the update button have to do with eventReactive, but most of my googling for the error
# lead me to conversations about ignoreNull and
# some of these buttons will update from the database if there is a value there (others will not because i couldnt
# figure out these update buttons)
{input$nextButton}, #ignoreNULL = FALSE, ignoreInit = FALSE,
{
updateMaterialSwitch(session=session, inputId="Button_discard",value=FALSE)
updateCheckboxGroupButtons(session=session, inputId="Button_Theme", selected = character(0))
updateCheckboxGroupButtons(session=session, inputId="Button_Methods", selected = character(0))
updateCheckboxGroupButtons(session=session, inputId="Button_Gender", selected = character(0))
updateCheckboxGroupButtons(session=session, inputId="Button_MMType", selected = character(0))
updateVirtualSelect(session=session, inputId="MM_Type", selected = NULL)
updateCheckboxGroupInput(session=session, inputId="Button_IncDev", selected = 0)
updateCheckboxGroupInput(session=session, inputId="EntreP_Type", selected = 0)
updateCheckboxGroupInput(session=session, inputId="EntreP_Sec", selected = 0)
updateCheckboxGroupInput(session=session, inputId="methodsGroup", selected = 0)
updateSelectInput(session=session, inputId="geoSelect", selected = as.numeric(data_bib$Screen2_Geography)[values$count+1])
updateTextInput(session=session, inputId="notesField", value = "")
#Below is from old code.
#updateCheckboxGroupInput(session=session, inputId="buzzGroup", selected = 0)
#updateCheckboxGroupInput(session=session, inputId="methodsGroup", selected = 0)
#updateSelectInput(session=session, inputId="geoSelect", selected = as.numeric(data_bib$Screen2_Location)[values$count+1])
#updateSelectInput(session=session, inputId="techSelect", selected = as.numeric(data_bib$Screen2_TypesTech)[values$count+1])
#updateSelectInput(session=session, inputId="entrePSelect", selected = as.numeric(data_bib$Screen2_TypesEntreP)[values$count+1])
#updateSelectInput(session=session, inputId="mmSelect", selected = as.numeric(data_bib$Screen2_TypesMM)[values$count+1])
#updateTextInput(session=session, inputId="notesField", value = "")
save(list="data_bib",file=Workingfile)
#-----------------------------------------------------
# If the row number is not at the end, increment up
# THIS IS *REALLY BAD CODING*, ADDED IN BECAUSE IT WANTS TO RECALCULATE THE VALUE.
# if(sum(c(input$discardButton,input$rainButton,input$modelButton, input$socialButton))>0){
if(values$count != nrow(data_bib)){
#-----------------------------------------------------
# move to the next row
values$count <- values$count + 1
#-----------------------------------------------------
# choose that row in the table
YourData <- data_bib[values$count,c("TI","AB")]
YourData2 <- sophiehighlight(YourData)
#-----------------------------------------------------
# Output to data_bib
data_bib$Screen2_Assessed    [values$count-1] <<- TRUE
data_bib$Screen2_Reject      [values$count-1] <<- input$discardButton
if(length(input$DFI_Theme) <= 0){
data_bib$Screen2_DFI           [values$count-1] <<- 0
} else{
data_bib$Screen2_DFI[values$count-1] <<- str_c(input$DFI_Theme, collapse = '_')
}
if(length(input$GAD_Theme) <= 0){
data_bib$Screen2_GAD        [values$count-1] <<- 0
} else{
data_bib$Screen2_GAD     [values$count-1] <<- str_c(input$GAD_Theme, collapse = '_')
}
if(length(input$ID) <= 0){
data_bib$Screen2_IncDev        [values$count-1] <<- 0
} else{
data_bib$Screen2_IncDev     [values$count-1] <<- str_c(input$ID, collapse = '_')
}
if(length(input$FI) <= 0){
data_bib$Screen2_FinancInc        [values$count-1] <<- 0
} else{
data_bib$Screen2_FinancInc     [values$count-1] <<- str_c(input$FI, collapse = '_')
}
if(length(input$MM_Type) <= 0){t
data_bib$Screen2_MMType[values$count-1] <<- 0
} else{
data_bib$Screen2_MMType[values$count-1] <<- input$MM_Type
}
if(length(input$Tech_Type) <= 0){t
data_bib$Screen2_TechType[values$count-1] <<- 0
} else{
data_bib$Screen2_TechType[values$count-1] <<- input$Tech_Type
}
if(length(input$EntreP_Type) <= 0){t
data_bib$Screen2_EntrePType[values$count-1] <<- 0
} else{
data_bib$Screen2_EntrePType[values$count-1] <<- input$EntreP_Type
}
if(length(input$EntreP_Sec) <= 0){t
data_bib$Screen2_EntrePSec[values$count-1] <<- 0
} else{
data_bib$Screen2_EntrePSec[values$count-1] <<- input$EntreP_Sec
}
if(length(input$methodsGroup) <= 0){
data_bib$Screen2_Methods     [values$count-1] <<- 0
} else{
data_bib$Screen2_Methods     [values$count-1] <<- str_c(input$methodsGroup, collapse = '_')
}
if(length(input$geoSelect) <= 0){
data_bib$Screen2_Geography       [values$count-1] <<- 0
} else {
data_bib$Screen2_Geography       [values$count-1] <<- input$geoSelect
}
if(length(input$buzzGroup) <= 0){
data_bib$Screen2_Buzzwords     [values$count-1] <<- 0
} else{
data_bib$Screen2_Buzzwords     [values$count-1] <<- str_c(input$buzzGroup, collapse = '_')
}
data_bib$Screen2_Notes       [values$count-1] <<- input$notesField
return(YourData2)
}
#-----------------------------------------------------
# Or put the final row
else{
YourData <- data_bib[ nrow(data_bib),c("TI","AB")]
YourData2 <- sophiehighlight(YourData)
#-----------------------------------------------------
# Output to data_bib
data_bib$Screen2_Assessed   [nrow(data_bib)] <<- TRUE
data_bib$Screen2_Reject     [nrow(data_bib)] <<- input$discardButton
data_bib$Screen2_DFI        [nrow(data_bib)] <<- str_c(input$DFI_Theme, collapse = '_')
data_bib$Screen2_GAD        [nrow(data_bib)] <<- str_c(input$GAD_Theme, collapse = '_')
data_bib$Screen2_MMType     [nrow(data_bib)] <<- str_c(input$MM_Type, collapse = '_')
data_bib$Screen2_TechType   [nrow(data_bib)] <<- str_c(input$Tech_Type, collapse = '_')
data_bib$Screen2_FinancInc  [nrow(data_bib)] <<- str_c(input$FI, collapse = '_')
data_bib$Screen2_Methods    [nrow(data_bib)] <<- str_c(input$methodsGroup, collapse = '_')
data_bib$Screen2_EntrePType [nrow(data_bib)] <<- str_c(input$EntreP_Type, collapse = '_')
data_bib$Screen2_EntrePSec  [nrow(data_bib)] <<- str_c(input$EntreP_Sec, collapse = '_')
data_bib$Screen2_Other      [nrow(data_bib)] <<- str_c(input$Other_Themes, collapse = '_')
data_bib$Screen2_Geography  [nrow(data_bib)] <<- input$geoSelect
data_bib$Screen2_Notes      [nrow(data_bib)] <<- input$notesField
#data_bib$Screen2_TypesEntreP[nrow(data_bib)] <<- input$entrePSelect
#data_bib$Screen2_TypesTech  [nrow(data_bib)] <<- input$techSelect
#data_bib$Screen2_TypesMM    [nrow(data_bib)] <<- input$mmSelect
return(YourData2)
}
})
#--------------------------------------------------------------------
# Output the table to the GUI
output$table <- DT::renderDataTable({ data <- highlighter()}, escape = FALSE,options = list(dom = 't',bSort=FALSE))
output$covidence <- renderUI({HTML(paste(highlightCovidence(), sep = '<br/>'))})
output$reject <- renderUI({ HTML(paste(highlightExclude(), sep = '<br/>'))})
#--------------------------------------------------------------------
# More info about the screening selections
hr()
output$moreInfo <- renderText({
paste("Assessment Definitions:
Main Topic - select papers main topic(s) can be multiple.
Tropes  - selct (if any) tropes paper is trying to convey (i.e. women can't use tech - gender imbalance)
Buzzwords - select all buzzwords papers has.
",
"Flash Flood Type Definitions:
Not specified - flood type not definied or explicitly stated, unclear
Rainfall - runoff, cloudburst, pluvial, caused by heavy precipitation (no river involved)
Dam/levee breach - anything to do with dams or levees
Speedy river - river height changes rapidly, fast onset riverine flood
Landslide/mudslide - explicitly mentions landslide/mudslide or debris in water
Snowmelt - caused by melting snow
",
"General Planning - select if the paper is not explicitly related to a single event and is about preparing or planning for future events",
"If the paper is about impacts in general, not related to a specific event, make sure 'general' is clicked before selecting the impacts",
"General Science - select if paper is about science-based general planning - ie developing geophysical risk maps",
sep="\n")
})
hr()
output$count <- renderUI({ HTML(paste("You have reviewed", (values$count - 2) ,"papers in this session")) })
output$total <- renderUI({HTML(paste("In total, we have reviewed", (sum(data_bib$Screen3_Assessed_v2, na.rm = TRUE)), "of", (length(data_bib$Screen3_Assessed_v2))))})
}
#=======================================================================
# Run the server
#=======================================================================
shinyApp(ui = ui, server = server)
#Analysis libraries
library(DT)      ;  library(magrittr)
library(stringr) ;  library(tidyverse)
library(RISmed)  ;  library(bibliometrix)
library(bib2df)  ;  library(knitr)
#Shiny libraries
library(shiny)   ;  library(rmdformats)
library(fresh)   ;  library(shinythemes)
library(shinyWidgets)
library(shinyEffects)
library(shinydashboard)
library(shinydashboardPlus)
ui <- dashboardPage(
dashboardHeader(title = "Accordion Test"),
dashboardSidebar(
materialSwitch(
inputId = "discardButton",
label = "Not Relevant",
value = FALSE,
status = "danger"
),
accordion(
id = "accordion1",
accordionItem(
title = "Accordion 1 Item 1",
status = "danger",
collapsed = TRUE,
"This is some text!"
),
accordionItem(
title = "Accordion 1 Item 2",
status = "warning",
collapsed = FALSE,
"This is some text!"
)
)
),
dashboardBody()
)
server <- function(input, output) {}
shinyApp(ui, server)
library(DT)      ;  library(magrittr)
library(stringr) ;  library(tidyverse)
library(RISmed)  ;  library(bibliometrix)
library(bib2df)  ;  library(knitr)
library(shiny)   ;  library(rmdformats)
library(shinythemes)
library(shinyWidgets)
library(shinyEffects)
library(shinydashboard)
library(shinydashboardPlus)
ui <- dashboardPage(
dashboardHeader(title = "Accordion Test"),
dashboardSidebar(
includeCSS("www/styles.css"),  # Custom styles
materialSwitch(
inputId = "discardButton",
label = "Not Relevant",
value = FALSE,
status = "danger"
),
accordion(
id = "screening_panels",
accordionItem(
title = "Accordion 1 Item 1",
status = "primary",     # Changed to primary
collapsed = TRUE,
solidHeader = TRUE,
"This is some text!"
),
accordionItem(
title = "Accordion 1 Item 2",
status = "primary",     # Changed to primary
collapsed = FALSE,
solidHeader = TRUE,
"This is some more text!"
)
)
),
dashboardBody(
#includeCSS("www/styles.css")  # Ensure styles are loaded in body too
)
)
server <- function(input, output) {}
shinyApp(ui, server)
